[32mINFO    [0m juju.model:__init__.py:3254 Waiting for model:
  pgbouncer-k8s/0 [idle] blocked: waiting for backend database relation to initialise
[32mINFO    [0m integration.test_charm:test_charm.py:41 {'databases': {}, 'peers': {'1': 'host=0 port=6464', '2': 'host=1 port=6464', '3': 'host=2 port=6464', '4': 'host=3 port=6464'}, 'pgbouncer': {'peer_id': '1', 'listen_addr': '*', 'listen_port': '6464', 'logfile': '/var/log/pgbouncer/instance_0/pgbouncer.log', 'pidfile': '/var/lib/pgbouncer/instance_0/pgbouncer.pid', 'stats_users': '', 'auth_type': 'scram-sha-256', 'user': 'postgres', 'max_client_conn': '10000', 'ignore_startup_parameters': 'extra_float_digits,options', 'server_tls_sslmode': 'prefer', 'so_reuseport': '1', 'unix_socket_dir': '/var/lib/pgbouncer/instance_0', 'pool_mode': 'session', 'max_db_connections': '100', 'default_pool_size': '13', 'min_pool_size': '7', 'reserve_pool_size': '7', 'auth_query': '', 'auth_file': '/dev/shm/pgbouncer-k8s_cbRnjDRPJcfJDSPelY5sPkrP'}}
[32mINFO    [0m integration.test_charm:test_charm.py:42 {'expose-external': {'default': 'false', 'description': "String to determine how to expose PgBouncer externally from the\nKubernetes cluster.\nPossible values: 'false', 'nodeport', 'loadbalancer'\n", 'source': 'default', 'type': 'string', 'value': 'false'}, 'listen_port': {'default': 6432, 'description': 'The port on which pgbouncer listens for traffic. Corresponds to\nlisten_port in pgbouncer config.\n', 'source': 'user', 'type': 'int', 'value': 6464}, 'loadbalancer-extra-annotations': {'default': '{}', 'description': 'A JSON string representing extra annotations for the Kubernetes service\ncreated and managed by the charm.\n', 'source': 'default', 'type': 'string', 'value': '{}'}, 'max_db_connections': {'default': 100, 'description': 'Do not allow more than this many server connections per database\n(regardless of user). This considers the PgBouncer database that the\nclient has connected to, not the PostgreSQL database of the outgoing\nconnection.\n\nNote that when you hit the limit, closing a client connection to one pool\nwill not immediately allow a server connection to be established for\nanother pool, because the server connection for the first pool is still\nopen. Once the server connection closes (due to idle timeout), a new\nserver connection will immediately be opened for the waiting pool.\n\nThis is used to calculate the following pgbouncer.ini config options,\nwhich are documented in the pgbouncer config docs here:\nhttps://www.pgbouncer.org/config.html.\n\n- Firstly, the number of pgbouncer instances is calculated based on the\n  number of CPU cores in the current deployment.\n- effective DB connections = max_db_connections / pgbouncer instances\n- default_pool_size = effective connections / 2\n- min_pool_size = effective connections / 4\n- reserve_pool_size = effective connections / 4\n\nIf max_db_connections is set to 0, the derivatives are set thusly, based\non pgbouncer defaults:\n- default_pool_size = 20\n- min_pool_size = 10\n- reserve_pool_size = 10\n\n0 = unlimited.\n', 'source': 'default', 'type': 'int', 'value': 100}, 'pool_mode': {'default': 'session', 'description': 'Specifies when a server connection can be reused by other clients. Can\nbe one of the following values:\n\nsession\nServer is released back to pool after client disconnects. Default.\n\ntransaction\nServer is released back to pool after transaction finishes.\n\nstatement\nServer is released back to pool after query finishes. Transactions\nspanning multiple statements are disallowed in this mode.\n', 'source': 'default', 'type': 'string', 'value': 'session'}}